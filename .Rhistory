train$Name
setwd('~/Desktop/titanicTutorial/')
train <- read.csv("~/Desktop/titanicTutorial/train.csv") # Import training dataset
test <- read.csv("~/Desktop/titanicTutorial/test.csv")   # Import test dataset
train$Name
train$Name[1]
test$Survived <- NA
combi <- rbind(train, test)
View(combi)
combi$Name[1]
combi$Name <- as.character(combi$Name) # cast the factor var NAME as chars
combi$Name[1]
strsplit(combi$Name[1], split = '[,.]')
strsplit(combi$Name[1], split = '[,.]')[[1]]
strsplit(combi$Name[1], split = '[,.]')[[1]][2]
strsplit(combi$Name[1], split = '[,.]')[[1]][2][1]
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title
combi$Title <- sub(' ', '', combi$Title)
combi$Title
table(combi$Title)
combi$Title[combi$Title %in% c('Mme','Mlle')] <- 'Mlle' # combine Mme and Mlle into single category
table(combi$Title)
combi$Title[combi$Title %in% c('Capt','Don','Major','Sir')] <- 'Sir'
table(combi$Title)
combi$Title[combi$Title %in% c('Dona','Jonkheer','Lady','the Countess')] <- 'Lady'
table(combi$Title)
combi$Title <- factor(combi$Title)
table(combi$Title)
combi$Title
combi$SibSp
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Name
strplit(combi$Name, split='[,.]')[[1]]
strsplit(combi$Name, split='[,.]')[[1]]
strsplit(combi$Name, split='[,.]')[[1]][1]
combi$Surname <- sapply(combi$Name,
FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$Surname
length(combi$Surname)
length(combi$FamilySize)
cbind(comb$Surname, combi$FamilySize)
cbind(combi$Surname, combi$FamilySize)
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
combi$FamilyID
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
combi$FamilyID
table(combi$FamilyID)
famIDs <- data.frame(table(combi$FamilyID))
View(famIDs)
famIDs <- famIDs[famIDs$Freq <= 2,]
View(famIDs)
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
table(combi$FamilyID)
combi[891:end]
combi[891:1309,]
library(rpart) # Import 'Recursive partitioning and Regression Trees' module
library('rattle')
library('rpart.plot')
library('RColorBrewer')
train  <- combi[1:891,]
test <- combi[891:1309,]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked +
Title + FamilySize + FamilyID,
data = combi,
method = "class")
fancyRpartPlot(fit)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type="class")
submit <- cbind(PassengerId=test$PassengerId, Survived=Prediction)
write.csv(submit, file="jfaFeatureEngineeredPrediction", row.names=FALSE)
View(submit)
View(submit)
Prediction <- predict(fit, test, type = "class")
submit     <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
View(submit)
write.csv(submit, file="jfaFeatureEngineeredPrediction", row.names=FALSE)
Prediction <- predict(fit, test, type = "class")
submit     <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file="jfaFeatureEngineeredPrediction", row.names=FALSE)
View(submit)
write.csv(submit, file="jfaFeatureEngineeredPredictions.csv", row.names=FALSE)
summary(submit)
length(submit)
View(submit)
Prediction <- predict(fit, test, type = "class")
submit     <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file="jfaFeatureEngineeredPredictions.csv", row.names=FALSE)
train  <- combi[1:891,]
test <- combi[892:1309,]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked +
Title + FamilySize + FamilyID,
data = combi,
method = "class")
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
submit     <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file="jfaFeatureEngineeredPredictions.csv", row.names=FALSE)
source('~/.active-rstudio-document')
setwd('~/Desktop/titanic/')
train <- read.csv("~/Desktop/titanic/train.csv") # Import training data
train <- read.csv("~/Desktop/titanic/train.csv") # Import training data
test <- read.csv("~/Desktop/titanic/test.csv")   # Import test data
str(train)
?fancyRpartPlot
?predict
sample(1:10, replace=TRUE)
summary(combi$Age)
combi$Age(is.na(combi$Age))
combi$Age[is.na(combi$Age)]
dplyr
filter(combi, is.na(Age))
filter(combi, is.na(combi$Age))
combi[is.na(combi$Age)]
table(filter(combi, is.na(combi$Age)))
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch
+ Fare + Embarked + Title + FamilySize,
data = combi[!is.na(combi$Age),] method="anova")
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch
+ Fare + Embarked + Title + FamilySize,
data = combi[!is.na(combi$Age),], method="anova")
predict(Agefit, combi[is.na(combi$Age)])
predict(Agefit, combi[is.na(combi$Age)])
predict(Agefit, combi[is.na(combi$Age)])
predict(Agefit, combi[is.na(combi$Age),])
fancyRpartPlot(Agefit)
fancyRpartPlot(Agefit)
summary(combi$Age)
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
summary(combi)
which(combi$Embarked == ' ')
which(combi$Embarked == '')
combi$Embarked[which(combi$Embarked == '')]
combi$Embarked[which(combi$Embarked == '')] = "S"
which(combi$Embarked == '')
combi$Embarked <- factor(combi$Embarked)
summary(combi)
is.na(combi$Fare)
which(is.na(combi$Fare))
combi$Fare[which(is.na(combi$Fare))]  <- median(combi$Fare, na.rm=TRUE)
summary(combi)
combi$FamilyID2 <- combi$FamilyID
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'
combi$FamilyID2 <- factor(combi$FamilyID2)
combi$FamilyID2
combi$FamilyID
install.packages('randomForest')
library(randomForest)
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize + FamilyID2,
data = train,
importance = TRUE,
ntree = 2000)
combi
summary(combi)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize + FamilyID2,
data = train,
importance = TRUE,
ntree = 2000)
train  <- combi[1:891,]
test <- combi[892:1309,]
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title + FamilySize + FamilyID2,
data = train,
importance = TRUE,
ntree = 2000)
varImpPlot(fit)
varImpPlot(fit)
Prediction <- predict(fit, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "jfaFirstForest.csv", row.names = FALSE)
install.packages('party')
library(party)
set.seed(415)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare
+ Embarked + Title + FamilySize + FamilyID,
data = train,
controls = cforest_unbiased(ntree = 2000, mtry = 3))
Prediction <- predict(fit, test, OOB=TRUE, type="response")
row.names = FALSE)
submit <- data.frame(PassengerId = test$PassengerId, Surved = Prediction,
row.names = FALSE)
submit <- data.frame(PassengerId = test$PassengerId, Surved = Prediction)
write.csv(submit, file = "jfaFirstConditionalInferenceTree.csv"
, row.names=FALSE)
Prediction <- predict(fit, test, OOB=TRUE, type="response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "jfaFirstConditionalInferenceTree.csv"
, row.names=FALSE)
Prediction <- predict(fit, test, OOB=TRUE, type="response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "jfaModel-FirstConditionalInferenceTree.csv"
, row.names=FALSE)
clear
sample.int(1, size = 9)
sample.int(9, size = 9)
sample.int(9, size = 1)
sample.int(9, size = 1)
sample.int(9, size = 1)
set.seed(425)
sample.int(9, size = 1)
sample.int(9, size = 1)
sample.int(9, size = 1)
set.seed(425)
sample.int(9, size = 1)
set.seed(425)
sample.int(9, size = 1)
sample.int(9, size = 1)
sample.int(9, size = 1)
n
sample.int(n, size = 1)
seatNumber = sample.int(n, size = 1) # Randomly sample (uniformly)
seatNumber -> sample.int(n, size = 1) # Randomly sample (uniformly)
seatNumber <- sample.int(n, size = 1) # Randomly sample (uniformly)
n = 9
seatNumber <- sample.int(n, size = 1) # Randomly sample (uniformly)
seatNumber <- sample.int(n, size = 1) # Randomly sample (uniformly)
seatNumber <- sample.int(n, size = 1) # Randomly sample (uniformly)
seatNumber <- sample.int(n, size = 1) # Randomly sample (uniformly)
?sample.int
seatNumber <- sample.int(n,
size = 1,
replace = FALSE) # Randomly sample (uniformly)
seatNumber <- sample.int(n, size = 1) # Randomly sample (uniformly)
seatNumber <- sample.int(n, size = 1) # Randomly sample (uniformly)
library(dplyr)
sample_n
?sample_n
1-10
c(1:10)
seats
n = 9
seats  <- c(1:n)
?data.frame
data.frame(seats = c(1:n), available = 0)
sample_n(as.table(dat))
dat <- data.frame(seats = c(1:n), available = 0)
sample_n(as.table(dat))
as.table(dat)
table(dat)
sample_n(table(dat))
sample_n(dat)
?tbl
tbl(dat)
as.tbl(dat)
sample_n(as.tbl(dat))
View(dat)
?if
()
?ifelse
sample(c(1:9))
sample(c(1:9))
sample(c(1:9), size=1)
sample(c(1:9), size=1)
sample(c(1:9), size=1)
sample(c(1:9), size=1)
?sample.int
chooseSeatNum <- sample.int(N, size=1)
N = 9
chooseSeatNum <- sample.int(N, size=1)
is.numeric(chooseSeatNum)
chooseSeatNum > 1
chooseSeatNum > 9
chooseSeatNum == 1 || N
chooseSeatNum == 1 || chooseSeatNum == N
chooseSeatNum == 1 || chooseSeatNum == N
chooseSeatNum == 1 || chooseSeatNum == N
chooseSeatNum == 1 || chooseSeatNum == N
chooseSeat <- function(N,numPassengers) {
if(N > 1) {
chooseSeatNum <- sample.int(N, size=1)
ifelse(chooseSeatNum == 1 || chooseSeatNum == N,
N <- N-2,
N <- N-3)
chooseSeat(N, numPassengers+1)
} else {
return numPassengers
}
}
chooseSeat <- function(N,numPassengers) {
if(N > 1) {
chooseSeatNum <- sample.int(N, size=1)
ifelse(chooseSeatNum == 1 || chooseSeatNum == N,
N <- N-2,
N <- N-3)
chooseSeat(N, numPassengers+1)
else
return numPassengers
}
}
numPassengers <- 0
if(N > 1) {
chooseSeatNum <- sample.int(N, size=1)
ifelse(chooseSeatNum == 1 || chooseSeatNum == N,
N <- N-2,
N <- N-3)
chooseSeat(N, numPassengers+1)
} else {
return numPassengers
}
?ifelse
chooseSeat <- function(N,numPassengers) {
if(N > 1) {
chooseSeatNum <- sample.int(N, size=1)
if(chooseSeatNum == 1 || chooseSeatNum == N) {
N <- N-2,
} else {
N <- N-3)
}
chooseSeat(N, numPassengers+1)
} else {
return numPassengers
}
}
